functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn
open Symbol

datatype lvaluePara =   Field of Symbol.symbol
                      | Subscript of A.exp

fun makeLvalue(v, pos, l::r) =
   (case l of
           Field(id) => makeLvalue(A.FieldVar(v, id, pos), pos, r)
         | Subscript(exp)  => makeLvalue(A.SubscriptVar(v, exp, pos), pos, r))
| makeLvalue(v, _, nil) = v
  

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\194\000\005\000\194\000\007\000\194\000\009\000\194\000\
\\011\000\194\000\013\000\194\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\194\000\026\000\194\000\
\\030\000\194\000\031\000\194\000\034\000\194\000\035\000\194\000\
\\037\000\194\000\038\000\194\000\042\000\194\000\043\000\194\000\
\\044\000\194\000\000\000\
\\001\000\001\000\195\000\005\000\195\000\007\000\195\000\009\000\195\000\
\\011\000\195\000\013\000\195\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\195\000\026\000\195\000\
\\030\000\195\000\031\000\195\000\034\000\195\000\035\000\195\000\
\\037\000\195\000\038\000\195\000\042\000\195\000\043\000\195\000\
\\044\000\195\000\000\000\
\\001\000\001\000\196\000\005\000\196\000\007\000\196\000\009\000\196\000\
\\011\000\196\000\013\000\196\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\196\000\026\000\196\000\
\\030\000\196\000\031\000\196\000\034\000\196\000\035\000\196\000\
\\037\000\196\000\038\000\196\000\042\000\196\000\043\000\196\000\
\\044\000\196\000\000\000\
\\001\000\001\000\197\000\005\000\197\000\007\000\197\000\009\000\197\000\
\\011\000\197\000\013\000\197\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\197\000\026\000\197\000\
\\030\000\197\000\031\000\197\000\034\000\197\000\035\000\197\000\
\\037\000\197\000\038\000\197\000\042\000\197\000\043\000\197\000\
\\044\000\197\000\000\000\
\\001\000\001\000\198\000\005\000\198\000\007\000\198\000\009\000\198\000\
\\011\000\198\000\013\000\198\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\198\000\026\000\198\000\
\\030\000\198\000\031\000\198\000\034\000\198\000\035\000\198\000\
\\037\000\198\000\038\000\198\000\042\000\198\000\043\000\198\000\
\\044\000\198\000\000\000\
\\001\000\001\000\199\000\005\000\199\000\007\000\199\000\009\000\199\000\
\\011\000\199\000\013\000\199\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\025\000\199\000\026\000\199\000\
\\030\000\199\000\031\000\199\000\034\000\199\000\035\000\199\000\
\\037\000\199\000\038\000\199\000\042\000\199\000\043\000\199\000\
\\044\000\199\000\000\000\
\\001\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\009\000\055\000\016\000\021\000\029\000\020\000\032\000\019\000\
\\033\000\018\000\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\001\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\016\000\021\000\029\000\020\000\032\000\019\000\033\000\018\000\
\\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\001\000\002\000\049\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\002\000\079\000\000\000\
\\001\000\002\000\080\000\000\000\
\\001\000\002\000\087\000\000\000\
\\001\000\002\000\090\000\000\000\
\\001\000\002\000\119\000\012\000\118\000\028\000\117\000\000\000\
\\001\000\002\000\121\000\000\000\
\\001\000\002\000\124\000\000\000\
\\001\000\002\000\149\000\000\000\
\\001\000\002\000\155\000\000\000\
\\001\000\002\000\159\000\000\000\
\\001\000\006\000\099\000\027\000\098\000\000\000\
\\001\000\006\000\141\000\000\000\
\\001\000\006\000\153\000\019\000\152\000\000\000\
\\001\000\007\000\086\000\009\000\085\000\015\000\038\000\016\000\037\000\
\\017\000\036\000\018\000\035\000\019\000\034\000\020\000\033\000\
\\021\000\032\000\022\000\031\000\023\000\030\000\024\000\029\000\
\\025\000\028\000\026\000\027\000\000\000\
\\001\000\008\000\100\000\000\000\
\\001\000\009\000\084\000\000\000\
\\001\000\009\000\112\000\000\000\
\\001\000\009\000\138\000\000\000\
\\001\000\011\000\111\000\015\000\038\000\016\000\037\000\017\000\036\000\
\\018\000\035\000\019\000\034\000\020\000\033\000\021\000\032\000\
\\022\000\031\000\023\000\030\000\024\000\029\000\025\000\028\000\
\\026\000\027\000\000\000\
\\001\000\011\000\145\000\015\000\038\000\016\000\037\000\017\000\036\000\
\\018\000\035\000\019\000\034\000\020\000\033\000\021\000\032\000\
\\022\000\031\000\023\000\030\000\024\000\029\000\025\000\028\000\
\\026\000\027\000\000\000\
\\001\000\013\000\107\000\000\000\
\\001\000\013\000\150\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\
\\030\000\083\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\
\\034\000\125\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\
\\035\000\082\000\000\000\
\\001\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\
\\035\000\156\000\000\000\
\\001\000\019\000\097\000\000\000\
\\001\000\019\000\110\000\000\000\
\\001\000\019\000\162\000\000\000\
\\001\000\027\000\081\000\000\000\
\\001\000\027\000\137\000\000\000\
\\001\000\037\000\077\000\042\000\048\000\043\000\047\000\044\000\046\000\000\000\
\\001\000\038\000\115\000\000\000\
\\001\000\039\000\135\000\000\000\
\\001\000\042\000\048\000\043\000\047\000\044\000\046\000\000\000\
\\165\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\166\000\027\000\026\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\000\000\
\\173\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\000\000\
\\183\000\000\000\
\\184\000\007\000\128\000\015\000\038\000\016\000\037\000\017\000\036\000\
\\018\000\035\000\019\000\034\000\020\000\033\000\021\000\032\000\
\\022\000\031\000\023\000\030\000\024\000\029\000\025\000\028\000\
\\026\000\027\000\000\000\
\\185\000\007\000\086\000\015\000\038\000\016\000\037\000\017\000\036\000\
\\018\000\035\000\019\000\034\000\020\000\033\000\021\000\032\000\
\\022\000\031\000\023\000\030\000\024\000\029\000\025\000\028\000\
\\026\000\027\000\000\000\
\\186\000\000\000\
\\187\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\016\000\021\000\029\000\020\000\032\000\019\000\033\000\018\000\
\\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\188\000\000\000\
\\189\000\000\000\
\\190\000\017\000\036\000\018\000\035\000\000\000\
\\191\000\017\000\036\000\018\000\035\000\000\000\
\\192\000\000\000\
\\193\000\000\000\
\\200\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\000\000\
\\201\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\000\000\
\\202\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\
\\031\000\126\000\000\000\
\\203\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\204\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\205\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\206\000\000\000\
\\207\000\000\000\
\\208\000\000\000\
\\209\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\210\000\000\000\
\\211\000\002\000\090\000\000\000\
\\212\000\000\000\
\\213\000\005\000\109\000\000\000\
\\214\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\215\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\216\000\000\000\
\\217\000\000\000\
\\218\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\016\000\021\000\029\000\020\000\032\000\019\000\033\000\018\000\
\\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\219\000\000\000\
\\220\000\005\000\114\000\015\000\038\000\016\000\037\000\017\000\036\000\
\\018\000\035\000\019\000\034\000\020\000\033\000\021\000\032\000\
\\022\000\031\000\023\000\030\000\024\000\029\000\025\000\028\000\
\\026\000\027\000\000\000\
\\221\000\000\000\
\\222\000\000\000\
\\223\000\000\000\
\\224\000\044\000\046\000\000\000\
\\225\000\042\000\048\000\000\000\
\\226\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\227\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\228\000\000\000\
\\229\000\000\000\
\\230\000\000\000\
\\231\000\000\000\
\\232\000\000\000\
\\233\000\000\000\
\\234\000\000\000\
\\235\000\000\000\
\\236\000\002\000\124\000\000\000\
\\237\000\000\000\
\\238\000\005\000\140\000\000\000\
\\239\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\240\000\015\000\038\000\016\000\037\000\017\000\036\000\018\000\035\000\
\\019\000\034\000\020\000\033\000\021\000\032\000\022\000\031\000\
\\023\000\030\000\024\000\029\000\025\000\028\000\026\000\027\000\000\000\
\\241\000\000\000\
\\242\000\000\000\
\\243\000\000\000\
\\244\000\000\000\
\\245\000\000\000\
\\246\000\008\000\060\000\010\000\059\000\012\000\058\000\014\000\057\000\000\000\
\\246\000\010\000\106\000\014\000\057\000\000\000\
\\246\000\010\000\106\000\014\000\057\000\039\000\133\000\000\000\
\"
val actionRowNumbers =
"\008\000\056\000\050\000\049\000\
\\052\000\047\000\059\000\055\000\
\\053\000\054\000\058\000\057\000\
\\046\000\048\000\081\000\045\000\
\\009\000\008\000\008\000\008\000\
\\007\000\051\000\069\000\121\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\098\000\099\000\104\000\
\\100\000\116\000\096\000\042\000\
\\010\000\011\000\012\000\040\000\
\\035\000\033\000\070\000\026\000\
\\024\000\061\000\118\000\013\000\
\\086\000\008\000\093\000\090\000\
\\075\000\076\000\003\000\004\000\
\\005\000\006\000\002\000\001\000\
\\074\000\073\000\072\000\071\000\
\\105\000\117\000\097\000\068\000\
\\037\000\021\000\025\000\008\000\
\\008\000\008\000\062\000\060\000\
\\008\000\122\000\031\000\088\000\
\\038\000\029\000\027\000\095\000\
\\043\000\067\000\066\000\015\000\
\\008\000\016\000\111\000\034\000\
\\079\000\077\000\065\000\119\000\
\\008\000\083\000\085\000\014\000\
\\008\000\123\000\091\000\092\000\
\\008\000\082\000\103\000\044\000\
\\111\000\106\000\101\000\041\000\
\\028\000\113\000\022\000\008\000\
\\008\000\063\000\008\000\030\000\
\\088\000\084\000\120\000\008\000\
\\095\000\018\000\032\000\008\000\
\\023\000\110\000\017\000\019\000\
\\036\000\078\000\065\000\122\000\
\\087\000\089\000\094\000\108\000\
\\107\000\102\000\008\000\020\000\
\\113\000\109\000\008\000\064\000\
\\114\000\039\000\112\000\080\000\
\\008\000\115\000\000\000"
val gotoT =
"\
\\001\000\162\000\002\000\012\000\003\000\011\000\004\000\010\000\
\\005\000\009\000\006\000\008\000\007\000\007\000\008\000\006\000\
\\009\000\005\000\011\000\004\000\012\000\003\000\013\000\002\000\
\\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\043\000\018\000\042\000\021\000\041\000\022\000\040\000\
\\027\000\039\000\028\000\038\000\033\000\037\000\000\000\
\\000\000\
\\002\000\048\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\049\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\050\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\052\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\014\000\051\000\
\\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\000\000\
\\002\000\059\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\060\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\061\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\062\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\063\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\064\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\065\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\066\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\067\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\068\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\069\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\070\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\071\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\027\000\072\000\000\000\
\\000\000\
\\021\000\073\000\000\000\
\\000\000\
\\000\000\
\\018\000\074\000\021\000\041\000\022\000\040\000\027\000\039\000\
\\028\000\038\000\033\000\037\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\024\000\087\000\025\000\086\000\000\000\
\\002\000\089\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\091\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\019\000\090\000\
\\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\094\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\014\000\093\000\
\\016\000\092\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\099\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\100\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\101\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\002\000\102\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\010\000\103\000\000\000\
\\000\000\
\\026\000\106\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\020\000\111\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\029\000\114\000\000\000\
\\002\000\118\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\030\000\121\000\031\000\120\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\125\000\000\000\
\\000\000\
\\002\000\127\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\024\000\128\000\000\000\
\\002\000\129\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\010\000\130\000\000\000\
\\000\000\
\\000\000\
\\002\000\132\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\030\000\121\000\031\000\134\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\032\000\137\000\000\000\
\\000\000\
\\002\000\140\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\002\000\141\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\002\000\142\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\026\000\144\000\000\000\
\\000\000\
\\000\000\
\\002\000\145\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\020\000\146\000\000\000\
\\000\000\
\\000\000\
\\002\000\149\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\030\000\152\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\155\000\000\000\
\\010\000\130\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\156\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\032\000\158\000\000\000\
\\000\000\
\\002\000\159\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\161\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\008\000\006\000\009\000\005\000\
\\011\000\004\000\012\000\003\000\013\000\002\000\023\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 163
val numrules = 82
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | vardec of unit ->  (A.dec)
 | tyfieldsTail of unit ->  (A.field list)
 | tyfields of unit ->  (A.field list) | tyfield of unit ->  (A.field)
 | ty of unit ->  (A.ty)
 | tydecs of unit ->  ({ name:symbol,ty:A.ty,pos:pos }  list)
 | tydec of unit ->  ({ name:symbol,ty:A.ty,pos:pos } )
 | recordFieldsTail of unit ->  ( ( symbol * A.exp * pos )  list)
 | recordFields of unit ->  ( ( symbol * A.exp * pos )  list)
 | recordField of unit ->  ( ( symbol * A.exp * pos ) )
 | record of unit ->  (A.exp) | fundecs of unit ->  (A.fundec list)
 | fundec of unit ->  (A.fundec)
 | functionParaTail of unit ->  (A.exp list)
 | functionPara of unit ->  (A.exp list) | dec of unit ->  (A.dec)
 | decs of unit ->  (A.dec list) | expList of unit ->  (A.exp)
 | sequencingExpTail of unit ->  ( ( A.exp * pos )  list)
 | sequencingExp of unit ->  ( ( A.exp * pos )  list)
 | sequencing of unit ->  (A.exp) | parentheses of unit ->  (A.exp)
 | arithmetic of unit ->  (A.exp)
 | lvalueTail of unit ->  (lvaluePara list)
 | lvalue of unit ->  (A.var) | functionCall of unit ->  (A.exp)
 | control of unit ->  (A.exp) | comparison of unit ->  (A.exp)
 | boolean of unit ->  (A.exp) | assignment of unit ->  (A.exp)
 | array of unit ->  (A.exp) | exp of unit ->  (A.exp)
 | program of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 31) => true | (T 32) => true | (T 33) => true | (T 39) => true
 | (T 35) => true | (T 36) => true | (T 37) => true | (T 41) => true
 | (T 42) => true | (T 43) => true | (T 27) => true | (T 28) => true
 | (T 29) => true | (T 30) => true | (T 34) => true | (T 38) => true
 | (T 40) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 29))::
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "AND"
  | (T 25) => "OR"
  | (T 26) => "ASSIGN"
  | (T 27) => "ARRAY"
  | (T 28) => "IF"
  | (T 29) => "THEN"
  | (T 30) => "ELSE"
  | (T 31) => "WHILE"
  | (T 32) => "FOR"
  | (T 33) => "TO"
  | (T 34) => "DO"
  | (T 35) => "LET"
  | (T 36) => "IN"
  | (T 37) => "END"
  | (T 38) => "OF"
  | (T 39) => "BREAK"
  | (T 40) => "NIL"
  | (T 41) => "FUNCTION"
  | (T 42) => "VAR"
  | (T 43) => "TYPE"
  | (T 44) => "UMINUS"
  | (T 45) => "LOWPREC"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp lvalue)
end)
 in ( LrTable.NT 1, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 2, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 1, ( result, NIL1left, NIL1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.parentheses parentheses1, parentheses1left, 
parentheses1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (parentheses as parentheses1) = parentheses1 ()
 in (parentheses)
end)
 in ( LrTable.NT 1, ( result, parentheses1left, parentheses1right), 
rest671)
end
|  ( 4, ( ( _, ( MlyValue.sequencing sequencing1, sequencing1left, 
sequencing1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (sequencing as sequencing1) = sequencing1 ()
 in (sequencing)
end)
 in ( LrTable.NT 1, ( result, sequencing1left, sequencing1right), 
rest671)
end
|  ( 5, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left),
 STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 1, ( result, STRING1left, STRING1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.arithmetic arithmetic1, arithmetic1left, 
arithmetic1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (arithmetic as arithmetic1) = arithmetic1 ()
 in (arithmetic)
end)
 in ( LrTable.NT 1, ( result, arithmetic1left, arithmetic1right), 
rest671)
end
|  ( 7, ( ( _, ( MlyValue.comparison comparison1, comparison1left, 
comparison1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (comparison as comparison1) = comparison1 ()
 in (comparison)
end)
 in ( LrTable.NT 1, ( result, comparison1left, comparison1right), 
rest671)
end
|  ( 8, ( ( _, ( MlyValue.boolean boolean1, boolean1left, 
boolean1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (boolean as boolean1) = boolean1 ()
 in (boolean)
end)
 in ( LrTable.NT 1, ( result, boolean1left, boolean1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.control control1, control1left, 
control1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (control as control1) = control1 ()
 in (control)
end)
 in ( LrTable.NT 1, ( result, control1left, control1right), rest671)

end
|  ( 10, ( ( _, ( MlyValue.record record1, record1left, record1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
record as record1) = record1 ()
 in (record)
end)
 in ( LrTable.NT 1, ( result, record1left, record1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.array array1, array1left, array1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (array
 as array1) = array1 ()
 in (array)
end)
 in ( LrTable.NT 1, ( result, array1left, array1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.assignment assignment1, assignment1left, 
assignment1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assignment as assignment1) = assignment1 ()
 in (assignment)
end)
 in ( LrTable.NT 1, ( result, assignment1left, assignment1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.functionCall functionCall1, 
functionCall1left, functionCall1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => let val  (functionCall as functionCall1
) = functionCall1 ()
 in (functionCall)
end)
 in ( LrTable.NT 1, ( result, functionCall1left, functionCall1right), 
rest671)
end
|  ( 14, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.parentheses (fn _ => let val  (exp as exp1) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 11, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 15, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.parentheses (fn _ => (
A.SeqExp []))
 in ( LrTable.NT 11, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 16, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( 
MlyValue.sequencingExp sequencingExp1, _, _)) :: ( _, ( _, LPAREN1left
, _)) :: rest671)) => let val  result = MlyValue.sequencing (fn _ =>
 let val  (sequencingExp as sequencingExp1) = sequencingExp1 ()
 in (A.SeqExp sequencingExp)
end)
 in ( LrTable.NT 12, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 17, ( ( _, ( MlyValue.sequencingExpTail sequencingExpTail1, _, 
sequencingExpTail1right)) :: ( _, ( MlyValue.exp exp2, exp2left, _))
 :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let
 val  result = MlyValue.sequencingExp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  (sequencingExpTail as sequencingExpTail1) = sequencingExpTail1
 ()
 in ([(exp1, exp1left)] @ [(exp2, exp2left)] @ sequencingExpTail)
end)
 in ( LrTable.NT 13, ( result, exp1left, sequencingExpTail1right), 
rest671)
end
|  ( 18, ( ( _, ( MlyValue.sequencingExpTail sequencingExpTail1, _, 
sequencingExpTail1right)) :: ( _, ( MlyValue.exp exp1, expleft, _)) ::
 ( _, ( _, SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.sequencingExpTail (fn _ => let val  (exp as exp1) = exp1 ()
 val  (sequencingExpTail as sequencingExpTail1) = sequencingExpTail1
 ()
 in ([(exp, expleft)] @ sequencingExpTail)
end)
 in ( LrTable.NT 14, ( result, SEMICOLON1left, sequencingExpTail1right
), rest671)
end
|  ( 19, ( rest671)) => let val  result = MlyValue.sequencingExpTail
 (fn _ => (nil))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.expList (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 15, ( result, exp1left, exp1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.sequencingExp sequencingExp1, 
sequencingExp1left, sequencingExp1right)) :: rest671)) => let val  
result = MlyValue.expList (fn _ => let val  (sequencingExp as 
sequencingExp1) = sequencingExp1 ()
 in (A.SeqExp sequencingExp)
end)
 in ( LrTable.NT 15, ( result, sequencingExp1left, sequencingExp1right
), rest671)
end
|  ( 22, ( rest671)) => let val  result = MlyValue.expList (fn _ => (
A.SeqExp []))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 23, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.arithmetic (fn _ => let val  (INT as 
INT1) = INT1 ()
 in (A.IntExp INT)
end)
 in ( LrTable.NT 10, ( result, INT1left, INT1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp{left=A.IntExp 0, oper=A.MinusOp, right=exp, pos=MINUSleft})

end)
 in ( LrTable.NT 10, ( result, MINUS1left, exp1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arithmetic (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comparison (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.boolean (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1, then'=A.IntExp 1, else'=SOME(exp2), pos=exp1left})

end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.boolean (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp 0), pos=exp1left})

end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.control (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
end)
 in ( LrTable.NT 6, ( result, IF1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.control (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
end
)
 in ( LrTable.NT 6, ( result, IF1left, exp3right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.control (fn _ => let val  
exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
end)
 in ( LrTable.NT 6, ( result, WHILE1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.control (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp{var=symbol ID, escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft}
)
end)
 in ( LrTable.NT 6, ( result, FOR1left, exp3right), rest671)
end
|  ( 41, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.control (fn _ => (
A.BreakExp BREAKleft))
 in ( LrTable.NT 6, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 42, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.expList 
expList1, _, _)) :: _ :: ( _, ( MlyValue.decs decs1, _, _)) :: ( _, (
 _, (LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.control (fn _ => let val  (decs as decs1) = decs1 ()
 val  (expList as expList1) = expList1 ()
 in (A.LetExp{decs=decs, body=expList, pos=LETleft})
end)
 in ( LrTable.NT 6, ( result, LET1left, END1right), rest671)
end
|  ( 43, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.recordFields
 recordFields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.record (fn _
 => let val  (ID as ID1) = ID1 ()
 val  (recordFields as recordFields1) = recordFields1 ()
 in (A.RecordExp{fields=recordFields, typ=symbol ID, pos=IDleft})
end)
 in ( LrTable.NT 22, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.recordField (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (symbol ID, exp, IDleft)
end)
 in ( LrTable.NT 23, ( result, ID1left, exp1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.recordFieldsTail recordFieldsTail1, _, 
recordFieldsTail1right)) :: ( _, ( MlyValue.recordField recordField1, 
recordField1left, _)) :: rest671)) => let val  result = 
MlyValue.recordFields (fn _ => let val  (recordField as recordField1)
 = recordField1 ()
 val  (recordFieldsTail as recordFieldsTail1) = recordFieldsTail1 ()
 in ([recordField] @ recordFieldsTail)
end)
 in ( LrTable.NT 24, ( result, recordField1left, 
recordFieldsTail1right), rest671)
end
|  ( 46, ( rest671)) => let val  result = MlyValue.recordFields (fn _
 => ([]))
 in ( LrTable.NT 24, ( result, defaultPos, defaultPos), rest671)
end
|  ( 47, ( ( _, ( MlyValue.recordFieldsTail recordFieldsTail1, _, 
recordFieldsTail1right)) :: ( _, ( MlyValue.recordField recordField1,
 _, _)) :: ( _, ( _, COMMA1left, _)) :: rest671)) => let val  result =
 MlyValue.recordFieldsTail (fn _ => let val  (recordField as 
recordField1) = recordField1 ()
 val  (recordFieldsTail as recordFieldsTail1) = recordFieldsTail1 ()
 in ([recordField] @ recordFieldsTail)
end)
 in ( LrTable.NT 25, ( result, COMMA1left, recordFieldsTail1right), 
rest671)
end
|  ( 48, ( rest671)) => let val  result = MlyValue.recordFieldsTail
 (fn _ => ([]))
 in ( LrTable.NT 25, ( result, defaultPos, defaultPos), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.array (fn
 _ => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.ArrayExp{typ=symbol ID, size=exp1, init=exp2, pos=IDleft})
end)
 in ( LrTable.NT 2, ( result, ID1left, exp2right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.assignment (fn _ => let val  (lvalue
 as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp{exp=exp, pos=lvalueleft, var=lvalue})
end)
 in ( LrTable.NT 3, ( result, lvalue1left, exp1right), rest671)
end
|  ( 51, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.functionPara
 functionPara1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.functionCall
 (fn _ => let val  (ID as ID1) = ID1 ()
 val  (functionPara as functionPara1) = functionPara1 ()
 in (A.CallExp{func=symbol ID, args=functionPara, pos=IDleft})
end)
 in ( LrTable.NT 7, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.functionParaTail functionParaTail1, _, 
functionParaTail1right)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) ::
 rest671)) => let val  result = MlyValue.functionPara (fn _ => let
 val  (exp as exp1) = exp1 ()
 val  (functionParaTail as functionParaTail1) = functionParaTail1 ()
 in ([exp] @ functionParaTail)
end)
 in ( LrTable.NT 18, ( result, exp1left, functionParaTail1right), 
rest671)
end
|  ( 53, ( rest671)) => let val  result = MlyValue.functionPara (fn _
 => (nil))
 in ( LrTable.NT 18, ( result, defaultPos, defaultPos), rest671)
end
|  ( 54, ( ( _, ( MlyValue.functionParaTail functionParaTail1, _, 
functionParaTail1right)) :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, (
 _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.functionParaTail (fn _ => let val  (exp as exp1) = exp1 ()
 val  (functionParaTail as functionParaTail1) = functionParaTail1 ()
 in ([exp] @ functionParaTail)
end)
 in ( LrTable.NT 19, ( result, COMMA1left, functionParaTail1right), 
rest671)
end
|  ( 55, ( rest671)) => let val  result = MlyValue.functionParaTail
 (fn _ => (nil))
 in ( LrTable.NT 19, ( result, defaultPos, defaultPos), rest671)
end
|  ( 56, ( ( _, ( MlyValue.dec dec1, dec1left, dec1right)) :: rest671)
) => let val  result = MlyValue.decs (fn _ => let val  (dec as dec1) =
 dec1 ()
 in ([dec])
end)
 in ( LrTable.NT 16, ( result, dec1left, dec1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.dec dec1, _, dec1right)) :: ( _, ( 
MlyValue.decs decs1, decs1left, _)) :: rest671)) => let val  result = 
MlyValue.decs (fn _ => let val  (decs as decs1) = decs1 ()
 val  (dec as dec1) = dec1 ()
 in (decs @ [dec])
end)
 in ( LrTable.NT 16, ( result, decs1left, dec1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.vardec vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
vardec as vardec1) = vardec1 ()
 in (vardec)
end)
 in ( LrTable.NT 17, ( result, vardec1left, vardec1right), rest671)

end
|  ( 59, ( ( _, ( MlyValue.tydecs tydecs1, tydecs1left, tydecs1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
tydecs as tydecs1) = tydecs1 ()
 in (A.TypeDec tydecs)
end)
 in ( LrTable.NT 17, ( result, tydecs1left, tydecs1right), rest671)

end
|  ( 60, ( ( _, ( MlyValue.fundecs fundecs1, fundecs1left, 
fundecs1right)) :: rest671)) => let val  result = MlyValue.dec (fn _
 => let val  (fundecs as fundecs1) = fundecs1 ()
 in (A.FunctionDec fundecs)
end)
 in ( LrTable.NT 17, ( result, fundecs1left, fundecs1right), rest671)

end
|  ( 61, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{name=symbol ID, escape=ref true, typ=NONE, init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 32, ( result, VAR1left, exp1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec{name=symbol ID1, escape=ref true, typ=SOME(symbol ID2, ID2left), init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 32, ( result, VAR1left, exp1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ({name=symbol ID, ty=ty, pos=TYPEleft})
end)
 in ( LrTable.NT 26, ( result, TYPE1left, ty1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.tydec tydec1, tydec1left, tydec1right)) :: 
rest671)) => let val  result = MlyValue.tydecs (fn _ => let val  (
tydec as tydec1) = tydec1 ()
 in ([tydec])
end)
 in ( LrTable.NT 27, ( result, tydec1left, tydec1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.tydec tydec1, _, tydec1right)) :: ( _, ( 
MlyValue.tydecs tydecs1, tydecs1left, _)) :: rest671)) => let val  
result = MlyValue.tydecs (fn _ => let val  (tydecs as tydecs1) = 
tydecs1 ()
 val  (tydec as tydec1) = tydec1 ()
 in (tydecs @ [tydec])
end)
 in ( LrTable.NT 27, ( result, tydecs1left, tydec1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy(symbol ID, IDleft))
end)
 in ( LrTable.NT 28, ( result, ID1left, ID1right), rest671)
end
|  ( 67, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy tyfields)
end)
 in ( LrTable.NT 28, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 68, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(symbol ID, ARRAYleft))
end)
 in ( LrTable.NT 28, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfield (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ({name=symbol ID1, escape=ref true, typ=symbol ID2, pos=ID1left})

end)
 in ( LrTable.NT 29, ( result, ID1left, ID2right), rest671)
end
|  ( 70, ( ( _, ( MlyValue.tyfieldsTail tyfieldsTail1, _, 
tyfieldsTail1right)) :: ( _, ( MlyValue.tyfield tyfield1, tyfield1left
, _)) :: rest671)) => let val  result = MlyValue.tyfields (fn _ => let
 val  (tyfield as tyfield1) = tyfield1 ()
 val  (tyfieldsTail as tyfieldsTail1) = tyfieldsTail1 ()
 in ([tyfield] @ tyfieldsTail)
end)
 in ( LrTable.NT 30, ( result, tyfield1left, tyfieldsTail1right), 
rest671)
end
|  ( 71, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
nil))
 in ( LrTable.NT 30, ( result, defaultPos, defaultPos), rest671)
end
|  ( 72, ( ( _, ( MlyValue.tyfieldsTail tyfieldsTail1, _, 
tyfieldsTail1right)) :: ( _, ( MlyValue.tyfield tyfield1, _, _)) :: (
 _, ( _, COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfieldsTail (fn _ => let val  (tyfield as tyfield1) = 
tyfield1 ()
 val  (tyfieldsTail as tyfieldsTail1) = tyfieldsTail1 ()
 in ([tyfield] @ tyfieldsTail)
end)
 in ( LrTable.NT 31, ( result, COMMA1left, tyfieldsTail1right), 
rest671)
end
|  ( 73, ( rest671)) => let val  result = MlyValue.tyfieldsTail (fn _
 => (nil))
 in ( LrTable.NT 31, ( result, defaultPos, defaultPos), rest671)
end
|  ( 74, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671))
 => let val  result = MlyValue.fundec (fn _ => let val  (ID as ID1) = 
ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 20, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result
 = MlyValue.fundec (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID1, params=tyfields, result=SOME(symbol ID2, ID2left), body=exp, pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 20, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.fundec fundec1, fundec1left, fundec1right))
 :: rest671)) => let val  result = MlyValue.fundecs (fn _ => let val 
 (fundec as fundec1) = fundec1 ()
 in ([fundec])
end)
 in ( LrTable.NT 21, ( result, fundec1left, fundec1right), rest671)

end
|  ( 77, ( ( _, ( MlyValue.fundec fundec1, _, fundec1right)) :: ( _, (
 MlyValue.fundecs fundecs1, fundecs1left, _)) :: rest671)) => let val 
 result = MlyValue.fundecs (fn _ => let val  (fundecs as fundecs1) = 
fundecs1 ()
 val  (fundec as fundec1) = fundec1 ()
 in (fundecs @ [fundec])
end)
 in ( LrTable.NT 21, ( result, fundecs1left, fundec1right), rest671)

end
|  ( 78, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) =>
 let val  result = MlyValue.lvalue (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (makeLvalue(A.SimpleVar(symbol ID, IDleft), IDleft, lvalueTail))

end)
 in ( LrTable.NT 8, ( result, ID1left, lvalueTail1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, DOT1left, _)) :: 
rest671)) => let val  result = MlyValue.lvalueTail (fn _ => let val  (
ID as ID1) = ID1 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (Field(symbol ID)::lvalueTail)
end)
 in ( LrTable.NT 9, ( result, DOT1left, lvalueTail1right), rest671)

end
|  ( 80, ( ( _, ( MlyValue.lvalueTail lvalueTail1, _, lvalueTail1right
)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, LBRACK1left,
 _)) :: rest671)) => let val  result = MlyValue.lvalueTail (fn _ =>
 let val  (exp as exp1) = exp1 ()
 val  (lvalueTail as lvalueTail1) = lvalueTail1 ()
 in (Subscript(exp)::lvalueTail)
end)
 in ( LrTable.NT 9, ( result, LBRACK1left, lvalueTail1right), rest671)

end
|  ( 81, ( rest671)) => let val  result = MlyValue.lvalueTail (fn _ =>
 (nil))
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun LOWPREC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
end
end
