structure Color  =  struct

structure Frame = MipsFrame
type allocation = Frame.register Temp.Map.map
structure MS = SplaySetFn(struct type ord_key = {from:Temp.temp,to:Temp.temp}
		         fun compare({from=f1,to=t1},{from=f2,to=t2}) = 
			  case Temp.compare(f1,f2) of
			      EQUAL => Temp.compare(t1,t2)
			    | x => x
		         end)
structure NM = Temp.Map
structure NS = Temp.Set
   
val movelist : MS.set NM.map ref = ref NM.empty

val worklistMoves : MS.set ref = ref MS.empty 
val activeMoves : MS.set ref = ref MS.empty
val frozenMoves : MS.set ref  = ref MS.empty
val coalescedMoves : MS.set ref = ref MS.empty
val constrainedMoves : MS.set ref = ref MS.empty

val selectStack : Temp.temp list ref = ref Stack.empty
val alias : Temp.temp NM.map ref = ref NM.empty
val degree : int NM.map ref = ref NM.empty

val spillWorklist : Temp.temp list ref = ref nil 
val freezeWorklist : Temp.temp list ref = ref nil
val simplifyWorklist : Temp.temp list ref = ref nil      
val coalescedNodes : Temp.temp list ref = ref nil

val precolored : NS.set ref = ref NS.empty
val coloredNodes : NS.set ref = ref NS.empty
val spilledNodes : NS.set ref = ref NS.empty
val initial : NS.set ref = ref NS.empty

val colored : Frame.register NM.map ref = ref NM.empty
val Impossible = ErrorMsg.impossible

fun color {interference = Liveness.IGRAPH{graph = funcgraph, moves = moves}, initial = initAlloc, spillCost, registers} =
  let val nodes = FuncGraph.nodes(funcgraph)
      val K = List.length(registers)
      val fgraph = ref funcgraph
      fun deleteItem ([], _) = Impossible "Delete item from empty list"
        | deleteItem (l, item) = List.filter (fn x => x <> item) l 

      fun getDegree n = case NM.find(!degree, n) of
                          NONE => Impossible "Can't find degree"
    	        	    | SOME d => d

      fun getColor n = case NM.find(!colored, n) of
                      NONE => Impossible "Can't find color"
		    | SOME c => c
 
     fun nodeMoves n =
       let val ms = case NM.find(!movelist, n) of
                      SOME moveset => moveset
                    | NONE => MS.empty
       in
         MS.intersection(ms, MS.union(!activeMoves, !worklistMoves))
       end

     fun moveRelated n = not(MS.isEmpty(nodeMoves n))

     fun enableMoves ns =
       let fun treatNode n = 
             let val ms = nodeMoves(n)
                 fun treatMove m =
                   if MS.member(!activeMoves, m) then (activeMoves := MS.delete(!activeMoves, m);worklistMoves := MS.add(!worklistMoves, m)) else ()
             in
               MS.app treatMove ms
             end
       in
          List.app treatNode ns
       end

     fun adjacent n = 
       let val adjlist = FuncGraph.adj(FuncGraph.getNode(funcgraph, n))
           val sclist = !selectStack @ !coalescedNodes 
       in
         foldl (fn (n, l) => deleteItem(l, n)) adjlist sclist
       end

     fun decrementDegree n =
       let val d = getDegree n
           val adj = adjacent n
       in
         degree := NM.insert(!degree, n, d - 1);
         if d - 1 = K then (enableMoves(n::adj);spillWorklist := deleteItem(!spillWorklist, n);
                             if moveRelated(n) then freezeWorklist := n::(!freezeWorklist)     
                             else simplifyWorklist := n::(!simplifyWorklist))
         else ()
       end

     fun getAlias n =
       if List.exists (fn x => x = n) (!coalescedNodes) then (case NM.find(!alias, n) of
                                                             NONE => Impossible "Empty alias list"
                                                           | SOME a => getAlias a)
       else n

     fun freezeMoves n =
       let val ms = nodeMoves n
           fun treatMove (m as {from = from, to = to}) =
             let val v =  if getAlias(to) = getAlias(n) then getAlias(from) else getAlias(to)
             in    
               activeMoves := MS.delete(!activeMoves, m);
               frozenMoves := MS.add(!frozenMoves, m);
               if (MS.isEmpty(nodeMoves(v)) andalso getDegree(v) < K) then (freezeWorklist := deleteItem(!freezeWorklist, v);simplifyWorklist := v::(!simplifyWorklist)) else ()
             end
       in
         MS.app treatMove ms
       end
 
     fun addWorklist u =
       if (not(NS.member(!precolored, u)) andalso not(moveRelated(u)) andalso getDegree(u) < K) then (freezeWorklist := deleteItem(!freezeWorklist, u);simplifyWorklist := u::(!simplifyWorklist))
       else ()

     fun OK (t, r) =
       let val t' = FuncGraph.getNode(!fgraph, t)
           val r' = FuncGraph.getNode(!fgraph,r)
       in
         getDegree(t) < K orelse NS.member(!precolored, t) orelse FuncGraph.isAdjacent(t', r')
       end

     fun conservative nodes =
       let val k = ref 0
       in
         app (fn n => if getDegree(n) >= K then k := !k + 1 else ()) nodes;
         (!k) < K
       end

     fun combine (u, v) =
       let val mlistu = case NM.find(!movelist, u) of
                          NONE => MS.empty
	        	   | SOME ms => ms
           val mlistv = case NM.find(!movelist, v) of
                          NONE => MS.empty
		        | SOME ms => ms
           val adjv = adjacent v
       in
         (if List.exists (fn x => x = v) (!freezeWorklist) then freezeWorklist := deleteItem(!freezeWorklist, v)
          else spillWorklist := deleteItem(!spillWorklist, v));
         coalescedNodes := v::(!coalescedNodes);
         alias := NM.insert(!alias, v, u);
         movelist := NM.insert(!movelist, u, MS.union(mlistu, mlistv));
         List.app (fn t => (FuncGraph.addEdge(!fgraph, {from = t, to = u});decrementDegree(t))) adjv;
         if (getDegree(u) >= K andalso List.exists(fn n => n = u) (!freezeWorklist)) then (freezeWorklist := deleteItem(!freezeWorklist, u);spillWorklist := u::(!spillWorklist)) else ()
       end
 
     fun build () =
       let fun treatNode n =
             let val nid = FuncGraph.getNodeID n
             in 
               (case NM.find(initAlloc, nid) of
                  SOME reg => (precolored := NS.add(!precolored, nid);colored :=NM.insert(!colored, nid, reg))
	        | NONE => initial := NS.add(!initial, nid)); 
               movelist := NM.insert(!movelist, nid, MS.empty);
               degree := NM.insert(!degree, nid, FuncGraph.degree n)        
             end

           fun addMove m = 
             let val mlistfrom = case NM.find(!movelist, #from m) of
                                   NONE => MS.empty
                                 | SOME ms => ms
                 val mlistto = case NM.find(!movelist, #to m) of
                                  NONE => MS.empty
                                | SOME ms => ms
             in 
               movelist := NM.insert(!movelist, #from m, MS.add(mlistfrom, m));
               movelist := NM.insert(!movelist, #to m, MS.add(mlistto, m));
               worklistMoves := MS.add(!worklistMoves, m)
              end
        in
           List.app treatNode nodes;
           List.app addMove moves
        end
  
     fun makeWorklist () = 
           let val n = List.hd(NS.listItems(!initial))
           in
             initial := NS.delete(!initial, n);
             (if getDegree(n) >= K then spillWorklist := n::(!spillWorklist)
              else if moveRelated(n) then freezeWorklist := n::(!freezeWorklist)
                   else simplifyWorklist := n::(!simplifyWorklist));
               if not(NS.isEmpty(!initial)) then makeWorklist() else ()
           end

     fun simplify (n::nl) = 
       let val adjn = adjacent n
       in
          simplifyWorklist := nl;
          Stack.push(!selectStack, n);
          app decrementDegree adjn
       end

     fun coalesce () =
       let val m = List.hd(NS.listItems(!worklistMoves)) 
          val x = getAlias(#from m)
          val y = getAlias(#to m)
          val (u, v) = case NS.member(!precolored, y) of
                         true => (y, x)
                       | false => (x, y)
          val u' = FuncGraph.getNode(!fgraph, u)
          val v' = FuncGraph.getNode(!fgraph, v) 
          val adju = adjacent(u)
          val adjv = adjacent(v)

          fun allOK (u, nodes) = not(List.exists(fn t => not(OK(t, u))) nodes)
       in
         worklistMoves := MS.delete(!worklistMoves, m);
         if (u = v) then (coalescedMoves := MS.add(!coalescedMoves, m);
                          addWorklist(u))
         else if (NS.member(!precolored, v) orelse FuncGraph.isAdjacent(u', v')) then (constrainedMoves := MS.add(!constrainedMoves, m);
                     addWorklist(u);
                     addWorklist(v))
               else if ((NS.member(!precolored, u) andalso allOK(u, adjv)) orelse (not(NS.member(!precolored, u)) andalso conservative(adju @ adjv))) then (coalescedMoves := MS.add(!coalescedMoves, m);combine(u, v);addWorklist(u))
               else activeMoves := MS.add(!activeMoves, m)
       end

     fun freeze (n::nl) =
       let 
       in
         freezeWorklist := nl;
         simplifyWorklist := n::(!simplifyWorklist);
         freezeMoves(n)
       end
 
     fun selectSpill (n::nl) =
       let
       in
         spillWorklist := deleteItem(!spillWorklist, n);
         simplifyWorklist := n::(!simplifyWorklist);
         freezeMoves(n)
       end

     fun assignColors () =
       let fun assigniter () = 
             let val n = Stack.top(!selectStack)
                 val okColors = ref registers
                 val adjlist = FuncGraph.adj(FuncGraph.getNode(!fgraph, n))
                 fun filterColor (w) =
                       let val aw = getAlias(w) 
                       in
                         if (NS.member(!precolored, aw) orelse NS.member(!coloredNodes, aw)) then okColors := deleteItem(!okColors, getColor(aw)) else ()
                  end 
             in
               selectStack := Stack.pop(!selectStack);
               List.app filterColor adjlist;
               (if !okColors = [] then spilledNodes := NS.add(!spilledNodes, n)
               else coloredNodes := NS.add(!coloredNodes, n));
               colored := NM.insert(!colored, n, List.hd(!okColors))
             end

          fun colorCoalesced (n) =
                let val an = getAlias(n)
                    val c = getColor(an)
                in
                  colored := NM.insert(!colored, n, c)
                end 
       in
         if Stack.isEmpty(!selectStack) = false then (assigniter();assignColors())
         else List.app colorCoalesced (!coalescedNodes)
  end
      
    fun repeat () =
        if !simplifyWorklist <> [] then (simplify(!simplifyWorklist);repeat())
        else if MS.isEmpty(!worklistMoves) = false then (coalesce();repeat())
             else if !freezeWorklist <> [] then (freeze(!freezeWorklist);repeat()) 
                  else if !spillWorklist <> [] then (selectSpill(!spillWorklist);repeat())
                       else () 
  in
    build();
    makeWorklist();
    repeat();
    assignColors()
  end
end
  
