structure A = Absyn
open Symbol

datatype lvaluePara =   Field of Symbol.symbol
                      | Subscript of A.exp

fun makeLvalue(v, pos, l::r) =
   (case l of
           Field(id) => makeLvalue(A.FieldVar(v, id, pos), pos, r)
         | Subscript(exp)  => makeLvalue(A.SubscriptVar(v, exp, pos), pos, r))
| makeLvalue(v, _, nil) = v
  
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS 
  | LOWPREC 

%nonterm  program of A.exp
        | exp of A.exp
        | array of A.exp
        | assignment of A.exp
        | boolean of A.exp
        | comparison of A.exp
        | control of A.exp
        | functionCall of A.exp
        | lvalue of A.var
        | lvalueTail of lvaluePara list
        | arithmetic of A.exp
        | parentheses of A.exp 
        | sequencing of A.exp 
        | sequencingExp of (A.exp * pos) list 
        | sequencingExpTail of (A.exp * pos) list 
        | expList of A.exp 
        | decs of A.dec list
        | dec of A.dec
        | functionPara of A.exp list
        | functionParaTail of A.exp list 
        | fundec of A.fundec 
        | fundecs of A.fundec list
        | record of A.exp
        | recordField of (symbol * A.exp * pos)  
        | recordFields of (symbol * A.exp * pos) list
        | recordFieldsTail of (symbol * A.exp * pos) list 
        | tydec of {name: symbol, ty: A.ty, pos: pos}
        | tydecs of {name: symbol, ty: A.ty, pos: pos} list
        | ty of A.ty
        | tyfield of A.field 
        | tyfields of A.field list
        | tyfieldsTail of A.field list 
        | vardec of A.dec     


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc LOWPREC
%nonassoc ID THEN DO OF
%nonassoc FUNCTION VAR TYPE ASSIGN LBRACK
%right ELSE
%left OR
%left AND
%nonassoc EQ NEQ GE GT LE LT
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: exp				(exp)

	
exp:   lvalue                           (A.VarExp lvalue)
     | NIL                              (A.NilExp) 
     | parentheses                      (parentheses)
     | sequencing                       (sequencing)
     | STRING                           (A.StringExp(STRING, STRINGleft))
     | arithmetic                       (arithmetic)
     | comparison                       (comparison)
     | boolean                          (boolean)
     | control                          (control)
     | record                           (record)
     | array                            (array)
     | assignment                       (assignment)
     | functionCall                     (functionCall)

parentheses:  LPAREN exp RPAREN                    (exp)
            | LPAREN RPAREN                        (A.SeqExp [])
sequencing: LPAREN sequencingExp RPAREN            (A.SeqExp sequencingExp)           
sequencingExp:  exp SEMICOLON exp sequencingExpTail ([(exp1, exp1left)] @ [(exp2, exp2left)] @ sequencingExpTail)
sequencingExpTail:  SEMICOLON exp sequencingExpTail ([(exp, expleft)] @ sequencingExpTail)
                  | (*empty*)                       (nil)            
expList:   exp                                     (exp)                   
         | sequencingExp                           (A.SeqExp sequencingExp)
         | (*empty*)                               (A.SeqExp [])

arithmetic:  INT                                   (A.IntExp INT)
           | MINUS exp %prec UMINUS                (A.OpExp{left=A.IntExp 0, oper=A.MinusOp, right=exp, pos=MINUSleft}) 
           | exp PLUS exp                          (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})                    
           | exp MINUS exp                         (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
           | exp TIMES exp                         (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
           | exp DIVIDE exp                        (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})


comparison:  exp EQ exp                            (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}) 
           | exp NEQ exp                           (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})            
           | exp GE exp                            (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
           | exp GT exp                            (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
           | exp LE exp                            (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
           | exp LT exp                            (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})

boolean:  exp OR exp                               (A.IfExp{test=exp1, then'=A.IntExp 1, else'=SOME(exp2), pos=exp1left})
        | exp AND exp                              (A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp 0), pos=exp1left})

control:  IF exp THEN exp            (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
        | IF exp THEN exp ELSE exp                 (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
        | WHILE exp DO exp                         (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
        | FOR ID ASSIGN exp TO exp DO exp          (A.ForExp{var=symbol ID, escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
        | BREAK                                    (A.BreakExp BREAKleft)
        | LET decs IN expList END                  (A.LetExp{decs=decs, body=expList, pos=LETleft})

record:  ID LBRACE recordFields RBRACE             (A.RecordExp{fields=recordFields, typ=symbol ID, pos=IDleft})
recordField:  ID EQ exp                            (symbol ID, exp, IDleft)
recordFields: recordField recordFieldsTail         ([recordField] @ recordFieldsTail)
            | (*empty*)                            ([])
recordFieldsTail: COMMA recordField recordFieldsTail ([recordField] @ recordFieldsTail)
            | (*empty*)                            ([])

array: ID LBRACK exp RBRACK OF exp                 (A.ArrayExp{typ=symbol ID, size=exp1, init=exp2, pos=IDleft})

assignment:   lvalue ASSIGN exp                    (A.AssignExp{exp=exp, pos=lvalueleft, var=lvalue})
         
functionCall: ID LPAREN functionPara RPAREN        (A.CallExp{func=symbol ID, args=functionPara, pos=IDleft})
functionPara:  exp functionParaTail                ([exp] @ functionParaTail)
             | (*empty*)                           (nil)
functionParaTail:  COMMA exp functionParaTail      ([exp] @ functionParaTail)
                 | (*empty*)                       (nil)

(* Declarations *)
decs:  dec                                        ([dec])
     | decs dec                                   (decs @ [dec])
dec:   vardec                                      (vardec)
     | tydecs %prec LOWPREC                        (A.TypeDec tydecs)
     | fundecs %prec LOWPREC                       (A.FunctionDec fundecs)

vardec:  VAR ID ASSIGN exp                         (A.VarDec{name=symbol ID, escape=ref true, typ=NONE, init=exp, pos=VARleft})
       | VAR ID COLON ID ASSIGN exp                (A.VarDec{name=symbol ID1, escape=ref true, typ=SOME(symbol ID2, ID2left), init=exp, pos=VARleft})

tydec:  TYPE ID EQ ty                              ({name=symbol ID, ty=ty, pos=TYPEleft})
tydecs:  tydec                                     ([tydec])
       | tydecs tydec                              (tydecs @ [tydec])
ty:  ID                                            (A.NameTy(symbol ID, IDleft))
   | LBRACE tyfields RBRACE                        (A.RecordTy tyfields)
   | ARRAY OF ID                                   (A.ArrayTy(symbol ID, ARRAYleft))

tyfield: ID COLON ID                               ({name=symbol ID1, escape=ref true, typ=symbol ID2, pos=ID1left})
tyfields:  tyfield tyfieldsTail                     ([tyfield] @ tyfieldsTail)
         | (*empty*)                                (nil)
tyfieldsTail :  COMMA tyfield tyfieldsTail         ([tyfield] @ tyfieldsTail)
              | (*empty*)                          (nil) 


fundec:  FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=symbol ID1, params=tyfields, result=SOME(symbol ID2, ID2left), body=exp, pos=FUNCTIONleft})
fundecs:  fundec                                 ([fundec])
        | fundecs fundec                       (fundecs @ [fundec])

(* Variables *)
lvalue:  ID lvalueTail                             (makeLvalue(A.SimpleVar(symbol ID, IDleft), IDleft, lvalueTail))
       
lvalueTail:   DOT ID lvalueTail                    (Field(symbol ID)::lvalueTail)
            | LBRACK exp RBRACK lvalueTail         (Subscript(exp)::lvalueTail)
            | (*empty*)                            (nil)
    
